# Improved app.py - Usando apenas Gemini
import streamlit as st
from datetime import date, timedelta
from typing import Optional, Dict, Any, List, Tuple
import requests
import re
import json
import os
from pathlib import Path
from loguru import logger

from utils.prompts import SYSTEM_PROMPT_VIAGEM, format_user_prompt_viagem

# Configure loguru
log_dir = "logs"
os.makedirs(log_dir, exist_ok=True)
logger.add("logs/app.log", rotation="1 day", retention="7 days", level="INFO")
logger.add("logs/error.log", rotation="1 day", retention="30 days", level="ERROR")

# Load custom CSS
def load_css():
    css_path = Path("static/css/custom.css")
    if css_path.exists():
        with open(css_path, "r", encoding="utf-8") as f:
            custom_css = f.read()
        
        # Adiciona as fontes e o CSS personalizado
        st.markdown(
            f"""
            <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
            <style>
                {custom_css}
            </style>
            """,
            unsafe_allow_html=True
        )
    else:
        st.warning("Arquivo CSS personalizado não encontrado. Usando estilos padrão.")

# Carrega o CSS personalizado
load_css()
        --primary-hover: #6366f1;
        --primary-light: rgba(99, 102, 241, 0.1);
        --success: #10b981;
        --warning: #f59e0b;
        --danger: #ef4444;
        --border: #334155;
        --border-light: #475569;
        --card-bg: #1e293b;
        --card-hover: #2d3748;
        --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    /* Reset e estilos base */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    
    body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        color: var(--text);
        background-color: var(--bg);
        line-height: 1.6;
        -webkit-font-smoothing: antialiased;
    }
    
    /* Container principal */
    .stApp {
        background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
        color: var(--text);
    }
    
    /* Cabeçalho */
    .nav-container {
        background: linear-gradient(135deg, #1e1b4b 0%, #312e81 100%);
        padding: 2rem 1.5rem;
        margin: -1.5rem -1.5rem 2rem -1.5rem;
        border-radius: 0 0 20px 20px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        position: relative;
        overflow: hidden;
    }
    
    .nav-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29-22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%234f46e5' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E");
        opacity: 0.3;
    }
    
    .nav-title {
        font-size: 2.2rem;
        font-weight: 800;
        margin: 0 0 0.5rem 0;
        background: linear-gradient(to right, #fff, #e0e7ff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        position: relative;
        z-index: 1;
    }
    
    .nav-subtitle {
        font-size: 1.1rem;
        color: rgba(255, 255, 255, 0.9);
        margin: 0;
        font-weight: 400;
        position: relative;
        z-index: 1;
    }
    
    /* Cards */
    .card {
        background: rgba(30, 41, 59, 0.8);
        backdrop-filter: blur(10px);
        border-radius: 16px;
        border: 1px solid var(--border);
        box-shadow: var(--shadow);
        padding: 2rem;
        margin-bottom: 1.5rem;
        transition: var(--transition);
    }
    
    .card:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.2);
        border-color: var(--primary);
    }
    
    .card-header {
        border-bottom: 1px solid var(--border-light);
        padding-bottom: 1.25rem;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 12px;
    }
    
    .card-title {
        font-size: 1.5rem;
        font-weight: 700;
        margin: 0;
        color: var(--text);
        display: flex;
        align-items: center;
        gap: 10px;
    }
    
    .card-subtitle {
        color: var(--text-muted);
        font-size: 1rem;
        margin: 0.25rem 0 0 0;
        font-weight: 400;
    }
    
    /* Seções do formulário */
    .form-section {
        margin-bottom: 2rem;
        background: rgba(30, 41, 59, 0.5);
        padding: 1.5rem;
        border-radius: 12px;
        border: 1px solid var(--border);
    }
    
    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1.25rem;
        color: var(--primary);
        display: flex;
        align-items: center;
        gap: 10px;
    }
    
    .section-icon {
        color: var(--primary);
        font-size: 1.2em;
    }
    
    /* Elementos de formulário */
    .stTextInput>div>div>input,
    .stTextArea>div>div>textarea,
    .stSelectbox>div>div>div,
    .stDateInput>div>div>input,
    .stNumberInput>div>div>input,
    .stMultiSelect>div>div>div>div {
        background-color: rgba(15, 23, 42, 0.7) !important;
        color: var(--text) !important;
        border: 1px solid var(--border) !important;
        border-radius: 10px !important;
        padding: 0.75rem 1rem !important;
        font-size: 0.95rem !important;
        transition: var(--transition) !important;
        box-shadow: none !important;
    }
    
    .stTextInput>div>div>input:focus,
    .stTextArea>div>div>textarea:focus,
    .stSelectbox>div>div>div:focus,
    .stDateInput>div>div>input:focus,
    .stNumberInput>div>div>input:focus {
        border-color: var(--primary) !important;
        box-shadow: 0 0 0 3px rgba(129, 140, 248, 0.2) !important;
    }
    
    /* Labels */
    .stTextInput>label,
    .stTextArea>label,
    .stSelectbox>label,
    .stDateInput>label,
    .stNumberInput>label,
    .stMultiSelect>label {
        color: var(--text) !important;
        font-weight: 500 !important;
        margin-bottom: 0.5rem !important;
        font-size: 0.95rem !important;
    }
    
    /* Botões */
    .stButton>button {
        background: linear-gradient(135deg, var(--primary) 0%, var(--primary-hover) 100%) !important;
        color: white !important;
        border: none !important;
        padding: 0.85rem 2rem !important;
        border-radius: 10px !important;
        font-weight: 600 !important;
        font-size: 1rem !important;
        transition: var(--transition) !important;
        width: 100% !important;
        box-shadow: 0 4px 15px rgba(99, 102, 241, 0.3) !important;
        text-transform: none !important;
        letter-spacing: 0.3px !important;
    }
    
    .stButton>button:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 8px 25px rgba(99, 102, 241, 0.4) !important;
    }
    
    .stButton>button:active {
        transform: translateY(0) !important;
    }
    
    /* Sidebar */
    .css-1d391kg {
        background: linear-gradient(180deg, #0f172a 0%, #1e293b 100%) !important;
        border-right: 1px solid var(--border) !important;
        padding: 1.5rem 1rem !important;
    }
    
    .css-1d391kg h3 {
        color: var(--primary) !important;
        font-weight: 700 !important;
        margin-bottom: 1.5rem !important;
        display: flex !important;
        align-items: center !important;
        gap: 8px !important;
        font-size: 1.2rem !important;
    }
    
    /* Status indicators */
    .status-badge {
        display: inline-flex !important;
        align-items: center !important;
        padding: 0.6rem 1rem !important;
        border-radius: 8px !important;
        font-size: 0.9rem !important;
        font-weight: 600 !important;
        margin-bottom: 1rem !important;
        width: 100% !important;
        transition: var(--transition) !important;
        border: 1px solid transparent !important;
    }
    
    .status-badge i {
        margin-right: 8px !important;
        font-size: 1.1em !important;
    }
    
    .status-active {
        background: rgba(16, 185, 129, 0.1) !important;
        color: var(--success) !important;
        border-color: rgba(16, 185, 129, 0.2) !important;
    }
    
    .status-inactive {
        background: rgba(239, 68, 68, 0.1) !important;
        color: var(--danger) !important;
        border-color: rgba(239, 68, 68, 0.2) !important;
    }
    
    /* Tooltips e ajuda */
    .stTooltip {
        font-family: 'Inter', sans-serif !important;
    }
    
    /* Scrollbar personalizada */
    ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }
    
    ::-webkit-scrollbar-track {
        background: rgba(15, 23, 42, 0.5);
        border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb {
        background: var(--primary);
        border-radius: 10px;
        transition: var(--transition);
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: var(--primary-hover);
    }
    
    /* Animações */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .fade-in {
        animation: fadeIn 0.5s ease-out forwards;
    }
    
    /* Responsividade */
    @media (max-width: 768px) {
        .nav-title {
            font-size: 1.8rem;
        }
        
        .nav-subtitle {
            font-size: 1rem;
        }
        
        .card {
            padding: 1.5rem;
        }
        
        .card-title {
            font-size: 1.3rem;
        }
        
        .section-title {
            font-size: 1.1rem;
        }
    }
</style>
    }
    
    /* Style cards and containers */
    .stContainer, .stBlockContainer, .stMarkdown, .stAlert {
        background-color: var(--card-bg);
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        border: 1px solid var(--border);
    }

    /* Hide default Streamlit elements */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    .stDeployButton {display:none;}
    div[data-testid="stDecoration"] {display:none;}
    div[data-testid="stToolbar"] {display:none;}
    
    /* Custom navigation */
    .nav-container {
        background: linear-gradient(90deg, #4f46e5 0%, #7c3aed 100%);
        padding: 0.75rem 1.25rem;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        margin-bottom: 1.25rem;
        border-radius: 10px;
        box-shadow: 0 3px 5px rgba(0, 0, 0, 0.08);
    }
    
    .nav-title {
        color: white;
        font-size: 1.6rem;
        font-weight: 700;
        margin: 0;
        text-align: center;
    }
    
    .nav-subtitle {
        color: rgba(255, 255, 255, 0.85);
        font-size: 0.95rem;
        text-align: center;
        margin-top: 0.35rem;
    }
    
    /* Main container */
    .main-container {
        max-width: 1100px;
        margin: 0 auto;
        padding: 0 1rem;
    }
    
    /* Quick settings bar */
    .quick-settings {
        background: var(--card-bg);
        border: 1px solid var(--border);
        border-radius: 10px;
        padding: 0.75rem 1rem;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        flex-wrap: wrap;
    }
    .quick-settings label { color: var(--muted); font-size: 0.95rem; }
    
    /* Cards */
    .card {
        background: var(--card-bg);
        border-radius: 12px;
        padding: 1.25rem;
        margin-bottom: 1.25rem;
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.08);
        border: 1px solid var(--border);
    }
    
    .card-header {
        border-bottom: 1px solid var(--border);
        padding-bottom: 0.75rem;
        margin-bottom: 1rem;
    }
    
    .card-title {
        color: var(--text);
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0;
    }
    
    .card-subtitle {
        color: var(--muted);
        font-size: 0.95rem;
        margin-top: 0.35rem;
    }
    
    /* Form styling */
    .form-section {
        background: var(--section-bg);
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 0.75rem;
        border: 1px solid var(--border);
    }
    
    .section-title {
        color: var(--text);
        font-size: 1.05rem;
        font-weight: 600;
        margin-bottom: 0.75rem;
        display: flex;
        align-items: center;
    }
    
    .section-icon {
        margin-right: 0.5rem;
        font-size: 1.2rem;
    }
    
    /* Buttons */
    .stButton > button {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 22px;
        padding: 0.6rem 1.5rem;
        font-size: 1rem;
        font-weight: 600;
        transition: all 0.25s ease;
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
    }
    
    .stButton > button:hover {
        transform: translateY(-1px);
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.15);
    }
    
    /* Sidebar styling */
    .css-1d391kg {
        background: linear-gradient(180deg, #f8f9fa 0%, #e9ecef 100%);
    }
    @media (prefers-color-scheme: dark) {
        .css-1d391kg { background: linear-gradient(180deg, #0b0f14 0%, #0e141b 100%); }
    }
    
    /* Status messages */
    .success-box {
        background: rgba(40, 167, 69, 0.12);
        border: 1px solid rgba(40, 167, 69, 0.35);
        border-radius: 10px;
        padding: 0.85rem;
        margin: 0.85rem 0;
        color: var(--text);
    }
    
    .warning-box {
        background: rgba(255, 193, 7, 0.12);
        border: 1px solid rgba(255, 193, 7, 0.35);
        border-radius: 10px;
        padding: 0.85rem;
        margin: 0.85rem 0;
        color: var(--text);
    }
    
    .error-box {
        background: rgba(220, 53, 69, 0.12);
        border: 1px solid rgba(220, 53, 69, 0.35);
        border-radius: 10px;
        padding: 0.85rem;
        margin: 0.85rem 0;
        color: var(--text);
    }
    
    /* Navigation buttons */
    .nav-button {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 18px;
        padding: 0.45rem 1.2rem;
        font-size: 0.95rem;
        font-weight: 500;
        text-decoration: none;
        display: inline-block;
        transition: all 0.25s ease;
        margin: 0.35rem;
    }
    
    .nav-button:hover {
        transform: translateY(-1px);
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
        text-decoration: none;
        color: white;
    }
</style>
""", unsafe_allow_html=True)

# Gemini imports
try:
	from google import genai
except Exception:  # pragma: no cover
	genai = None  # type: ignore


def _strip_code_fences(text: str) -> str:
	"""Remove leading/trailing triple backticks and language tags like ```markdown."""
	if not text:
		return text
	# Normalize newlines
	t = text.strip()
	# Pattern for ```lang
	fence_start = re.compile(r"^```[a-zA-Z0-9_-]*\s*")
	fence_end = re.compile(r"```\s*$")
	# Remove start fence
	t = fence_start.sub("", t)
	# Remove ending fence
	t = fence_end.sub("", t)
	# Fix common typos like 'markdomw'
	t = t.replace("markdomw", "").strip()
	return t


def _parse_json_response(text: str) -> Optional[Dict[Any, Any]]:
	"""Parse JSON response from AI, handling common issues."""
	if not text:
		return None
	
	# Clean the text first
	cleaned = _strip_code_fences(text)
	
	try:
		# Try to parse as JSON directly
		return json.loads(cleaned)
	except json.JSONDecodeError:
		# Try to extract JSON from the text
		json_match = re.search(r'\{.*\}', cleaned, re.DOTALL)
		if json_match:
			try:
				return json.loads(json_match.group())
			except json.JSONDecodeError:
				pass
		
		# If all else fails, create a fallback structure
		logger.warning("Could not parse JSON response, creating fallback structure")
		return {
			"titulo": "Roteiro de Viagem",
			"subtitulo": "Roteiro personalizado gerado",
			"visao_geral": {
				"destino": "Destino não especificado",
				"duracao": 1,
				"estilo": "Personalizado",
				"clima_esperado": "Verifique as condições locais",
				"hospedagem_sugerida": "Consulte sites de hospedagem"
			},
			"cronograma": [{
				"dia": 1,
				"titulo": "Dia de Exploração",
				"atividades": [{
					"horario": "Manhã",
					"atividade": cleaned[:200] + "..." if len(cleaned) > 200 else cleaned,
					"dica": ""
				}]
			}],
			"gastronomia": {
				"pratos_indispensaveis": ["Experimente a culinária local"],
				"restaurante_tesouro": "Consulte recomendações locais",
				"experiencia_culinaria": "Explore mercados e restaurantes locais"
			},
			"vida_noturna": {
				"bares_recomendados": ["Explore bares locais e pubs tradicionais"],
				"clubes_festas": ["Consulte eventos locais e festas da região"],
				"shows_eventos": ["Verifique agenda de shows e eventos noturnos"],
				"roteiro_bar_hopping": "Explore a vida noturna local",
				"dicas_noturnas": "Mantenha-se seguro e respeite os horários locais"
			},
			"dicas_viagem": {
				"mobilidade": "Use transporte público ou aplicativos de carona",
				"comunicacao": "Aprenda frases básicas do idioma local",
				"alerta_especialista": "Mantenha-se seguro e hidratado"
			}
		}


# Função removida - Usando apenas Gemini


def _call_ai(user_prompt: str, model_name: str = "gemini-2.5-flash") -> Optional[str]:
    """Chama a API do Gemini para gerar respostas."""
    logger.info("Iniciando chamada para API Gemini")
    
    if genai is None:
        logger.error("Módulo google.generativeai não está disponível")
        st.error("❌ Erro: Módulo google.generativeai não está instalado. Execute: pip install google-generativeai")
        return None
        
    # Tenta obter a chave de múltiplas fontes
    api_key = None
    
    # 1. Tentar do arquivo .env
    try:
        from dotenv import load_dotenv
        load_dotenv()
        api_key = os.environ.get('GEMINI_API_KEY')
        if api_key:
            logger.info("Chave API Gemini encontrada no arquivo .env")
    except Exception as e:
        logger.warning(f"Erro ao carregar .env: {e}")
    
    # 2. Tentar do secrets.toml (Streamlit)
    if not api_key and 'GEMINI_API_KEY' in st.secrets:
        api_key = st.secrets['GEMINI_API_KEY']
        logger.info("Chave API Gemini encontrada no secrets.toml")
    
    # 3. Tentar das variáveis de ambiente do sistema
    if not api_key:
        api_key = os.environ.get('GEMINI_API_KEY')
        if api_key:
            logger.info("Chave API Gemini encontrada nas variáveis de ambiente do sistema")
    
    if not api_key:
        erro_msg = "❌ Erro: Chave da API Gemini não encontrada. Verifique o arquivo .env ou .streamlit/secrets.toml"
        logger.error(erro_msg)
        st.error(erro_msg)
        return None
    
    try:
        # Configura a API
        genai.configure(api_key=api_key)
        logger.info(f"Enviando requisição para Gemini com modelo {model_name}")
        
        # Cria o modelo
        model = genai.GenerativeModel(model_name)
        
        # Prepara as mensagens com o prompt do sistema e a pergunta do usuário
        messages = [
            {"role": "user", "parts": [SYSTEM_PROMPT_VIAGEM]},
            {"role": "model", "parts": ["Entendido, estou pronto para ajudar com o roteiro de viagem."]},
            {"role": "user", "parts": [user_prompt]}
        ]
        
        # Gera a resposta
        response = model.generate_content(messages)
        
        if response and hasattr(response, 'text'):
            logger.success(f"Resposta recebida com {len(response.text)} caracteres")
            return response.text
        else:
            logger.warning("Resposta vazia recebida da API")
            return None
            
    except Exception as e:
        logger.error(f"Erro na chamada para a API: {e}")
        st.error(f"❌ Erro ao processar a requisição: {str(e)}")
        return None


def _offline_fallback(user_prompt: str) -> str:
	"""Last-resort offline template if both AIs fail."""
	logger.warning("Usando gerador offline (fallback final)")
	return (
		"### Roteiro Base (Offline)\n\n"
		"Não foi possível consultar os modelos online. Aqui está um roteiro-base.\n\n"
		"- Manhã: passeio leve pela região central e pontos icônicos.\n"
		"- Tarde: visita a um museu/mercado local.\n"
		"- Noite: jantar típico e caminhada por bairro charmoso.\n\n"
		"Inclua deslocamentos, reservas antecipadas e adapte ao seu ritmo."
	)


def _navigate_to_results(json_data: Dict[Any, Any], provider_used: str) -> None:
	st.session_state["roteiro_json"] = json_data
	st.session_state["provider_used"] = provider_used
	st.switch_page("pages/01_Roteiro.py")


def run_app() -> None:
    # Configuração da página
    st.set_page_config(
        page_title="Planejador de Viagens IA",
        page_icon="✈️",
        layout="wide",
        initial_sidebar_state="expanded",
        menu_items={
            'Get Help': 'https://github.com/seu-usuario/gerador-roteiros',
            'Report a bug': 'https://github.com/seu-usuario/gerador-roteiros/issues',
            'About': "### ✈️ Planejador de Viagens IA\n\nGere roteiros de viagem personalizados com IA.\n\nDesenvolvido com ❤️ usando Python e Google Gemini AI"
        }
    )
    
    # Cabeçalho com gradiente
    st.markdown("""
    <div class="nav-container">
        <h1 class="nav-title">✈️ Planeje Sua Próxima Aventura</h1>
        <p class="nav-subtitle">Crie roteiros de viagem personalizados com IA em poucos cliques</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Barra lateral com status e informações
    with st.sidebar:
        st.markdown("### <i class='fas fa-info-circle'></i> Status do Sistema")
        
        # Status da API
        if st.secrets.get("GEMINI_API_KEY") and st.secrets.get("GEMINI_API_KEY") != "coloque_sua_chave_do_gemini_aqui":
            st.markdown(
                "<div class='status-badge status-active'>"
                "<i class='fas fa-check-circle'></i> Gemini API Conectada"
                "</div>",
                unsafe_allow_html=True
            )
            
            # Seletor de modelo Gemini
            st.markdown("### <i class='fas fa-cog'></i> Configurações")
            gemini_model = st.selectbox(
                "Modelo do Gemini",
                ["gemini-1.5-pro-latest", "gemini-2.5-flash", "gemini-2.0-pro"],
                index=0,
                help="Selecione o modelo de IA para gerar seu roteiro"
            )
        else:
            st.markdown(
                "<div class='status-badge status-inactive'>"
                "<i class='fas fa-exclamation-circle'></i> Gemini API Não Configurada"
                "</div>",
                unsafe_allow_html=True
            )
            st.warning("Configure a chave da API do Gemini no arquivo .env ou secrets.toml")
            gemini_model = "gemini-1.5-pro-latest"
        
        # Dicas rápidas
        st.markdown("### <i class='fas fa-lightbulb'></i> Dicas Rápidas")
        st.markdown("""
        - ✈️ Selecione seu destino e datas desejadas
        - 🎯 Escolha seu estilo de viagem e orçamento
        - 🍽️ Informe preferências alimentares para recomendações personalizadas
        - 💡 Quanto mais detalhes, melhor será seu roteiro!
        """)
        
        # Créditos
        st.markdown("---")
        st.markdown("""
        <div style="font-size: 0.85rem; color: #94a3b8; text-align: center;">
            <p>Desenvolvido com ❤️ usando Python e Gemini AI</p>
            <p>© 2025 Gerador de Roteiros de Viagem</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Container principal
    st.markdown('<div class="main-container">', unsafe_allow_html=True)

    # Main form card
    st.markdown("""
    <div class="card">
        <div class="card-header">
            <h2 class="card-title">✈️ Seu Perfil de Viagem</h2>
            <p class="card-subtitle">Preencha os detalhes para um roteiro personalizado</p>
        </div>
    """, unsafe_allow_html=True)
	
	with st.form("form_viagem"):
		# Basic info section
		st.markdown("""
		<div class="form-section">
			<h3 class="section-title"><span class="section-icon">📍</span>Informações Básicas</h3>
		""", unsafe_allow_html=True)
		
		col1, col2, col3 = st.columns(3)
		with col1:
			destino = st.text_input("Destino principal", placeholder="Ex.: Roma, Itália", help="Cidade ou país de destino")
		with col2:
			tipo_data = st.selectbox("Tipo de data", 
				["Data específica (dia/mês/ano)", "Mês e ano", "Melhor período (IA escolhe)"], 
				help="Escolha como especificar o período", key="tipo_data_select")
		with col3:
			duracao = st.number_input("Duração (dias)", min_value=1, max_value=60, value=7, step=1, help="Quantos dias de viagem")
		
		# MELHORIA: Removido o uso de session_state para detectar mudança e rerun. Em vez disso, usamos condicionais diretos.
		# Isso evita reruns desnecessários e melhora a estabilidade do formulário.
		# Configuração de data baseada na opção escolhida - CAMPOS CONDICIONAIS
		# Não precisamos mais de st.empty(), pois o form é renderizado condicionalmente de forma simples.
		
		if tipo_data == "Data específica (dia/mês/ano)":
			st.markdown("**📅 Data de Início:**")
			data_inicio = st.date_input("Selecione a data exata", value=date.today(), help="Data exata da viagem", label_visibility="collapsed", key="data_especifica")
			data_flexivel = False
			periodo_especifico = f"Data específica: {data_inicio.strftime('%d/%m/%Y')}"
		elif tipo_data == "Mês e ano":
			st.markdown("**📅 Mês e Ano:**")
			col_mes, col_ano = st.columns(2)
			with col_mes:
				mes = st.selectbox("Mês", 
					["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho",
					 "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
					index=date.today().month - 1, label_visibility="collapsed", key="mes_select")
			with col_ano:
				ano = st.selectbox("Ano", 
					[date.today().year, date.today().year + 1, date.today().year + 2],
					index=0, label_visibility="collapsed", key="ano_select")
			
			# Converter para data (primeiro dia do mês)
			mes_num = ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho",
					   "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"].index(mes) + 1
			data_inicio = date(ano, mes_num, 1)
			data_flexivel = True
			periodo_especifico = f"Mês e ano: {mes} de {ano}"
		else:  # Melhor período (IA escolhe)
			st.markdown("**🤖 IA Escolherá o Melhor Período**")
			st.info("A IA analisará o destino e escolherá as melhores datas considerando clima, eventos e temporadas.")
			# NÃO mostrar campo de data quando IA escolhe
			data_inicio = None  # MELHORIA: Set to None instead of today() to indicate no specific date
			data_flexivel = True
			periodo_especifico = "Melhor período para o destino (IA escolherá as datas ideais)"
		
		st.markdown("</div>", unsafe_allow_html=True)
		
		# Traveler profile section
		st.markdown("""
		<div class="form-section">
			<h3 class="section-title"><span class="section-icon">👥</span>Perfil dos Viajantes</h3>
		""", unsafe_allow_html=True)
		
		col1, col2, col3, col4 = st.columns(4)
		with col1:
			perfil = st.selectbox("Tipo de viagem", ["Casal", "Família", "Solo", "Grupo de amigos", "Negócios"], index=0)
		with col2:
			num_viajantes = st.number_input("Número de viajantes", min_value=1, max_value=20, value=2)
		with col3:
			faixa_etaria = st.selectbox("Faixa etária", ["18-25", "26-35", "36-50", "51+"], index=1)
		with col4:
			criancas = st.toggle("Leva crianças?")
		
		st.markdown("</div>", unsafe_allow_html=True)
		
		# Preferences section
		st.markdown("""
		<div class="form-section">
			<h3 class="section-title"><span class="section-icon">🎯</span>Preferências de Viagem</h3>
		""", unsafe_allow_html=True)
		
		col1, col2 = st.columns(2)
		with col1:
			orcamento = st.selectbox("Orçamento", ["Econômico", "Intermediário", "Luxo"], index=1)
			ritmo = st.selectbox("Ritmo da viagem", ["Relaxado", "Moderado", "Intenso"], index=1)
			hospedagem = st.selectbox("Hospedagem", ["Hostel", "Hotel 3*", "Hotel 4*", "Hotel 5*", "Apartamento"], index=2)
		with col2:
			interesses = st.multiselect("Interesses", ["Gastronomia", "História", "Natureza", "Arte e museus", "Vida noturna", "Compras", "Aventura", "Tecnologia"], help="Selecione seus principais interesses")
			nivel_caminhada = st.select_slider("Nível de caminhada", options=["Muito baixo", "Baixo", "Médio", "Alto"], value="Médio")
			clima_desejado = st.selectbox("Clima desejado", ["Ameno", "Frio", "Quente"], index=0)
		
		st.markdown("</div>", unsafe_allow_html=True)
		
		# Additional details section
		st.markdown("""
		<div class="form-section">
			<h3 class="section-title"><span class="section-icon">📝</span>Detalhes Adicionais</h3>
		""", unsafe_allow_html=True)
		
		col1, col2 = st.columns(2)
		with col1:
			restricoes_alimentares = st.text_input("Restrições alimentares", placeholder="Ex.: vegetariano, sem lactose, halal, kosher")
			horarios_preferidos = st.text_input("Horários preferidos", placeholder="Ex.: acorda tarde, jantar cedo")
			aversoes = st.text_input("Aversões (evitar)", placeholder="Ex.: filas longas, locais muito turísticos")
		with col2:
			datas_flexiveis = st.selectbox("Datas flexíveis?", ["Não", "Sim"], index=0)
			cidades_proximas = st.text_input("Cidades próximas de interesse", placeholder="Ex.: Nápoles, Florença")
		
		observacoes = st.text_area("Observações e pedidos especiais", placeholder="Restrições, mobilidade, locais dos sonhos, etc.", height=100)
		
		st.markdown("</div>", unsafe_allow_html=True)
		
		# Submit button
		col1, col2, col3 = st.columns([1, 2, 1])
		with col2:
			submitted = st.form_submit_button("✨ Gerar Roteiro Personalizado", use_container_width=True)
	
	# Close card
	st.markdown("</div>", unsafe_allow_html=True)

	if submitted:
		if not destino:
			st.markdown("""
			<div class="warning-box">
				⚠️ Por favor, informe o destino principal.
			</div>
			""", unsafe_allow_html=True)
			return

		logger.info(f"Iniciando geração de roteiro para destino: {destino}")
		user_data = {
			"destino": destino.strip(),
			"data_inicio": data_inicio,  # MELHORIA: Agora pode ser None para "Melhor período"
			"duracao": int(duracao),
			"perfil": perfil,
			"orcamento": orcamento,
			"interesses": interesses,
			"ritmo": ritmo,
			"observacoes": (observacoes or "").strip() or "Sem observações.",
			"num_viajantes": int(num_viajantes),
			"criancas": bool(criancas),
			"faixa_etaria": faixa_etaria,
			"hospedagem": hospedagem,
			"restricoes_alimentares": restricoes_alimentares or "Nenhuma",
			"nivel_caminhada": nivel_caminhada,
			"horarios_preferidos": horarios_preferidos or "Flexível",
			"aversoes": aversoes or "Nenhuma",
			"clima_desejado": clima_desejado,
			"datas_flexiveis": datas_flexiveis,
			"cidades_proximas": cidades_proximas or "",
			"tipo_data": tipo_data,
			"data_flexivel": data_flexivel,
			"periodo_especifico": periodo_especifico,
		}

		logger.info(f"Dados do usuário coletados: {user_data}")
		user_prompt = format_user_prompt_viagem(user_data)

		resultado: Optional[str] = None
		provider_used = None

		# Usando apenas o Gemini
		with st.spinner("🤖 Gerando roteiro com IA..."):
			try:
				resultado = _call_ai(user_prompt)
				provider_used = "Gemini" if resultado else None
			except Exception as e:
				logger.error(f"Erro ao consultar Gemini: {e}")
				resultado = None

		# Se falhar, tenta o fallback offline
		if not resultado:
			resultado = _offline_fallback(user_prompt)
			provider_used = "Offline"

		if resultado:
			# Parse JSON response
			json_data = _parse_json_response(resultado)
			if json_data:
				logger.success(f"Roteiro gerado com sucesso usando {provider_used}")
				st.markdown(f"""
				<div class="success-box">
					✅ Roteiro gerado com sucesso usando {provider_used}!
				</div>
				""", unsafe_allow_html=True)
				_navigate_to_results(json_data, provider_used)
			else:
				logger.error("Falha ao processar resposta JSON")
				st.markdown("""
				<div class="error-box">
					❌ Erro ao processar resposta da IA. Tente novamente.
				</div>
				""", unsafe_allow_html=True)
		else:
			logger.error("Falha total: não foi possível gerar o roteiro")
			st.markdown("""
			<div class="error-box">
				❌ Não foi possível gerar o roteiro. Verifique suas configurações.
			</div>
			""", unsafe_allow_html=True)

	# Close main container
	st.markdown("</div>", unsafe_allow_html=True)


if __name__ == "__main__":
	run_app()