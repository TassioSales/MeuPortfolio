import streamlit as st
import pandas as pd
from datetime import datetime
from modulos import Usuario
from utils.helpers import format_phone, format_cpf, validate_cpf, validate_email, format_date

def usuarios_page():
    """P√°gina de gerenciamento de usu√°rios do sistema PDV"""
    st.title("üë§ Usu√°rios")
    
    # Verifica se o usu√°rio est√° autenticado
    if 'user' not in st.session_state:
        st.warning("Por favor, fa√ßa login para acessar esta p√°gina.")
        st.stop()
    
    # Verifica se o usu√°rio √© administrador
    if st.session_state.user.get('role') != 'admin':
        st.error("Acesso negado. Apenas administradores podem gerenciar usu√°rios.")
        return
    
    # Inicializa o estado da sess√£o para o formul√°rio de usu√°rio
    if 'usuario_editando' not in st.session_state:
        st.session_state.usuario_editando = None
    
    # Barra lateral com filtros e a√ß√µes
    st.sidebar.header("A√ß√µes")
    
    # Bot√£o para adicionar novo usu√°rio
    if st.sidebar.button("‚ûï Novo Usu√°rio"):
        st.session_state.usuario_editando = None
        st.experimental_rerun()
    
    # Filtros
    st.sidebar.subheader("Filtros")
    
    # Filtro por nome
    filtro_nome = st.sidebar.text_input("Nome do Usu√°rio")
    
    # Filtro por e-mail
    filtro_email = st.sidebar.text_input("E-mail")
    
    # Filtro por status
    status_filtro = st.sidebar.radio(
        "Status",
        ["Todos", "Ativos", "Inativos"],
        index=0
    )
    
    # Filtro por perfil
    perfil_filtro = st.sidebar.selectbox(
        "Perfil",
        ["Todos", "Administrador", "Vendedor", "Caixa"],
        index=0
    )
    
    # Mapeia os perfis para os valores no banco de dados
    perfil_map = {
        "Administrador": "admin",
        "Vendedor": "vendedor",
        "Caixa": "caixa"
    }
    
    # Busca os usu√°rios com base nos filtros
    usuarios = Usuario.buscar_por_filtros(
        nome=filtro_nome if filtro_nome else None,
        email=filtro_email if filtro_email else None,
        ativo=None if status_filtro == "Todos" else (status_filtro == "Ativos"),
        perfil=perfil_map[perfil_filtro] if perfil_filtro != "Todos" else None
    )
    
    # Se n√£o h√° usu√°rios cadastrados ou filtro n√£o retornou resultados
    if not usuarios:
        if filtro_nome or filtro_email or status_filtro != "Todos" or perfil_filtro != "Todos":
            st.info("Nenhum usu√°rio encontrado com os filtros selecionados.")
        else:
            st.info("Nenhum usu√°rio cadastrado. Use o bot√£o 'Novo Usu√°rio' para come√ßar.")
    
    # Se h√° um usu√°rio sendo editado ou um novo usu√°rio est√° sendo adicionado
    if st.session_state.usuario_editando is not None:
        # Se √© uma edi√ß√£o, carrega os dados do usu√°rio
        if st.session_state.usuario_editando:
            usuario = next((u for u in usuarios if u.id == st.session_state.usuario_editando), None)
            if not usuario:
                st.error("Usu√°rio n√£o encontrado.")
                st.session_state.usuario_editando = None
                st.experimental_rerun()
            titulo_form = "Editar Usu√°rio"
            modo_edicao = True
        else:
            # Novo usu√°rio
            usuario = Usuario()
            titulo_form = "Novo Usu√°rio"
            modo_edicao = False
        
        # Formul√°rio de cadastro/edi√ß√£o
        with st.form(key='form_usuario', clear_on_submit=not modo_edicao):
            st.subheader(titulo_form)
            
            # Dados b√°sicos
            col1, col2 = st.columns(2)
            
            with col1:
                nome = st.text_input("Nome Completo *", 
                                   value=usuario.nome if usuario.nome else "",
                                   max_length=100)
                
                email = st.text_input("E-mail *", 
                                    value=usuario.email if usuario.email else "",
                                    max_length=100)
                
                # Senha (obrigat√≥ria apenas para novo usu√°rio)
                if not modo_edicao:
                    senha = st.text_input("Senha *", 
                                        type="password",
                                        help="A senha deve ter pelo menos 6 caracteres.")
                else:
                    senha = st.text_input("Nova Senha", 
                                        type="password",
                                        help="Deixe em branco para manter a senha atual.")
                
                # Confirma√ß√£o de senha
                if not modo_edicao or senha:
                    confirmar_senha = st.text_input("Confirmar Senha", 
                                                  type="password",
                                                  help="Digite a mesma senha novamente.")
                else:
                    confirmar_senha = ""
            
            with col2:
                cpf = st.text_input(
                    "CPF *",
                    value=usuario.cpf if usuario.cpf else "",
                    max_length=14,
                    help="Formato: 000.000.000-00"
                )
                
                telefone = st.text_input(
                    "Telefone *",
                    value=format_phone(usuario.telefone) if usuario.telefone else "",
                    max_length=15,
                    help="Formato: (00) 00000-0000"
                )
                
                perfil = st.selectbox(
                    "Perfil *",
                    ["Administrador", "Gerente", "Vendedor", "Caixa"],
                    index=0 if not usuario.perfil else 
                          ["Administrador", "Gerente", "Vendedor", "Caixa"].index(usuario.perfil.capitalize())
                )
                
                # Status (apenas para edi√ß√£o e n√£o pode desativar a si mesmo)
                if modo_edicao:
                    if usuario.id != st.session_state.user['id']:  # N√£o pode desativar a si mesmo
                        ativo = st.toggle("Usu√°rio Ativo", value=usuario.ativo)
                    else:
                        ativo = True
                        st.write("**Status:** Ativo (voc√™ n√£o pode desativar a si mesmo)")
                else:
                    ativo = True  # Novo usu√°rio √© ativo por padr√£o
            
            # Bot√µes do formul√°rio
            col1, col2, col3 = st.columns([1, 1, 2])
            
            with col1:
                submit = st.form_submit_button("üíæ Salvar")
            
            with col2:
                if st.form_submit_button("‚ùå Cancelar"):
                    st.session_state.usuario_editando = None
                    st.experimental_rerun()
            
            # Valida√ß√£o e salvamento
            if submit:
                # Valida√ß√µes
                erros = []
                
                if not nome.strip():
                    erros.append("O campo Nome Completo √© obrigat√≥rio.")
                
                if not email.strip():
                    erros.append("O campo E-mail √© obrigat√≥rio.")
                elif not validate_email(email):
                    erros.append("E-mail inv√°lido.")
                
                if not cpf.strip():
                    erros.append("O campo CPF √© obrigat√≥rio.")
                elif not validate_cpf(cpf):
                    erros.append("CPF inv√°lido. Formato esperado: 000.000.000-00")
                
                if not telefone.strip():
                    erros.append("O campo Telefone √© obrigat√≥rio.")
                
                # Valida√ß√£o de senha
                if not modo_edicao and not senha:
                    erros.append("A senha √© obrigat√≥ria para novo usu√°rio.")
                
                if senha and len(senha) < 6:
                    erros.append("A senha deve ter pelo menos 6 caracteres.")
                
                if senha and senha != confirmar_senha:
                    erros.append("As senhas n√£o conferem.")
                
                # Verifica se o e-mail j√° existe (apenas para novo usu√°rio ou se o e-mail foi alterado)
                if not modo_edicao or email.lower() != usuario.email.lower():
                    usuario_existente = Usuario.buscar_por_email(email)
                    if usuario_existente and (not modo_edicao or usuario_existente.id != usuario.id):
                        erros.append(f"J√° existe um usu√°rio cadastrado com o e-mail {email}.")
                
                # Verifica se o CPF j√° existe (apenas para novo usu√°rio ou se o CPF foi alterado)
                cpf_limpo = ''.join(filter(str.isdigit, cpf))
                if not modo_edicao or cpf_limpo != usuario.cpf:
                    cpf_existente = Usuario.buscar_por_cpf(cpf_limpo)
                    if cpf_existente and (not modo_edicao or cpf_existente.id != usuario.id):
                        erros.append(f"J√° existe um usu√°rio cadastrado com o CPF {cpf}.")
                
                # Se n√£o h√° erros, salva o usu√°rio
                if not erros:
                    # Atualiza os dados do usu√°rio
                    usuario.nome = nome.strip()
                    usuario.email = email.strip().lower()
                    usuario.cpf = cpf_limpo
                    usuario.telefone = ''.join(filter(str.isdigit, telefone))
                    usuario.perfil = perfil.lower()
                    
                    # Atualiza a senha se fornecida
                    if senha:
                        usuario.set_senha(senha)
                    
                    # Status
                    if modo_edicao and usuario.id != st.session_state.user['id']:  # N√£o pode desativar a si mesmo
                        usuario.ativo = ativo
                    
                    # Salva o usu√°rio
                    if usuario.salvar():
                        st.success("Usu√°rio salvo com sucesso!")
                        st.session_state.usuario_editando = None
                        st.experimental_rerun()
                    else:
                        st.error("Erro ao salvar o usu√°rio. Por favor, tente novamente.")
                else:
                    # Exibe os erros de valida√ß√£o
                    for erro in erros:
                        st.error(erro)
        
        # Se n√£o est√° em modo de edi√ß√£o, n√£o mostra a lista de usu√°rios
        return
    
    # Se chegou aqui, exibe a lista de usu√°rios
    if usuarios:
        # Prepara os dados para exibi√ß√£o
        dados = []
        for usuario in usuarios:
            dados.append({
                "ID": usuario.id,
                "Nome": usuario.nome,
                "E-mail": usuario.email,
                "CPF": format_cpf(usuario.cpf) if usuario.cpf else "",
                "Telefone": format_phone(usuario.telefone) if usuario.telefone else "",
                "Perfil": usuario.perfil.capitalize(),
                "√öltimo Acesso": format_date(usuario.ultimo_acesso) if usuario.ultimo_acesso else "Nunca",
                "Status": "Ativo" if usuario.ativo else "Inativo"
            })
        
        # Cria o DataFrame
        df = pd.DataFrame(dados)
        
        # Exibe a tabela com os usu√°rios
        st.dataframe(
            df,
            column_config={
                "ID": st.column_config.NumberColumn("ID", format="%d"),
                "Nome": "Nome",
                "E-mail": "E-mail",
                "CPF": "CPF",
                "Telefone": "Telefone",
                "Perfil": "Perfil",
                "√öltimo Acesso": "√öltimo Acesso",
                "Status": "Status"
            },
            hide_index=True,
            use_container_width=True,
            height=600
        )
        
        # Adiciona bot√µes de a√ß√£o para cada usu√°rio
        st.subheader("A√ß√µes")
        
        # Seleciona um usu√°rio para a√ß√£o
        usuario_id = st.selectbox(
            "Selecione um usu√°rio para a√ß√£o",
            [""] + [f"{u.id} - {u.nome} ({u.perfil.capitalize()})" for u in usuarios],
            format_func=lambda x: x if x else "Selecione..."
        )
        
        if usuario_id:
            # Extrai o ID do usu√°rio
            usuario_id = int(usuario_id.split(" - ")[0])
            usuario = next((u for u in usuarios if u.id == usuario_id), None)
            
            if usuario:
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    if st.button("‚úèÔ∏è Editar", use_container_width=True):
                        st.session_state.usuario_editando = usuario.id
                        st.experimental_rerun()
                
                with col2:
                    # Bot√£o para ativar/desativar (n√£o pode desativar a si mesmo)
                    if usuario.id == st.session_state.user['id']:
                        st.button("üö´ Desativar", disabled=True, help="Voc√™ n√£o pode desativar a si mesmo", use_container_width=True)
                    else:
                        if usuario.ativo:
                            if st.button("üö´ Desativar", use_container_width=True):
                                usuario.ativo = False
                                if usuario.salvar():
                                    st.success("Usu√°rio desativado com sucesso!")
                                    st.experimental_rerun()
                                else:
                                    st.error("Erro ao desativar o usu√°rio.")
                        else:
                            if st.button("‚úÖ Ativar", use_container_width=True):
                                usuario.ativo = True
                                if usuario.salvar():
                                    st.success("Usu√°rio ativado com sucesso!")
                                    st.experimental_rerun()
                                else:
                                    st.error("Erro ao ativar o usu√°rio.")
                
                with col3:
                    # Bot√£o para redefinir senha
                    if st.button("üîë Redefinir Senha", use_container_width=True):
                        # Gera uma senha aleat√≥ria
                        import random
                        import string
                        nova_senha = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
                        
                        # Define a nova senha
                        usuario.set_senha(nova_senha)
                        
                        if usuario.salvar():
                            st.success("Senha redefinida com sucesso!")
                            st.info(f"Nova senha tempor√°ria: **{nova_senha}**")
                            st.warning("Recomenda-se que o usu√°rio altere esta senha no pr√≥ximo login.")
                        else:
                            st.error("Erro ao redefinir a senha.")
                
                # Exibe os detalhes do usu√°rio
                st.subheader("Detalhes do Usu√°rio")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**Nome:** {usuario.nome}")
                    st.write(f"**E-mail:** {usuario.email}")
                    st.write(f"**CPF:** {format_cpf(usuario.cpf) if usuario.cpf else 'N√£o informado'}")
                    st.write(f"**Telefone:** {format_phone(usuario.telefone) if usuario.telefone else 'N√£o informado'}")
                
                with col2:
                    st.write(f"**Perfil:** {usuario.perfil.capitalize()}")
                    st.write(f"**Status:** {'Ativo' if usuario.ativo else 'Inativo'}")
                    st.write(f"**Data de Cadastro:** {format_date(usuario.data_cadastro) if usuario.data_cadastro else 'N√£o dispon√≠vel'}")
                    st.write(f"**√öltimo Acesso:** {format_date(usuario.ultimo_acesso) if usuario.ultimo_acesso else 'Nunca'}")
                
                # Estat√≠sticas do usu√°rio (se aplic√°vel)
                if usuario.ultimo_acesso:
                    st.subheader("Estat√≠sticas")
                    
                    # Aqui voc√™ pode adicionar estat√≠sticas espec√≠ficas do usu√°rio, como:
                    # - Total de vendas realizadas
                    # - Valor total vendido
                    # - M√©dia de vendas por dia
                    # etc.
                    
                    st.info("Estat√≠sticas detalhadas do usu√°rio ser√£o exibidas aqui.")

# Se este arquivo for executado diretamente
if __name__ == "__main__":
    usuarios_page()
