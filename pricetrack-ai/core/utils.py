"""
Fun√ß√µes Auxiliares e Utilit√°rios para PriceTrack AI
Valida√ß√µes, helpers e funcionalidades de suporte
"""

import re
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import List, Dict, Any, Optional, Union
from datetime import datetime, timedelta
import streamlit as st
from core.logger import get_logger, log_user_action
from core.models import Product

logger = get_logger(__name__)


class ValidationError(Exception):
    """Exce√ß√£o para erros de valida√ß√£o"""
    pass


def validate_price(price: Union[str, float, int]) -> float:
    """
    Valida e converte pre√ßo para float
    
    Args:
        price: Pre√ßo em string, float ou int
        
    Returns:
        Pre√ßo como float
        
    Raises:
        ValidationError: Se pre√ßo for inv√°lido
    """
    try:
        if isinstance(price, str):
            # Remover caracteres n√£o num√©ricos exceto ponto e v√≠rgula
            cleaned = re.sub(r'[^\d,.]', '', price)
            # Substituir v√≠rgula por ponto se necess√°rio
            cleaned = cleaned.replace(',', '.')
            price_float = float(cleaned)
        else:
            price_float = float(price)
        
        if price_float <= 0:
            raise ValidationError("Pre√ßo deve ser maior que zero")
        
        if price_float > 1000000:  # Limite razo√°vel
            raise ValidationError("Pre√ßo muito alto (m√°ximo R$ 1.000.000)")
        
        logger.info(f"Pre√ßo validado: R$ {price_float:.2f}")
        log_user_action(logger, "price_validation", f"Pre√ßo validado: R$ {price_float:.2f}")
        return price_float
        
    except (ValueError, TypeError) as e:
        logger.error(f"Erro na valida√ß√£o de pre√ßo '{price}': {str(e)}")
        raise ValidationError(f"Pre√ßo inv√°lido: {price}")


def validate_product_name(name: str) -> str:
    """
    Valida nome do produto
    
    Args:
        name: Nome do produto
        
    Returns:
        Nome validado e limpo
        
    Raises:
        ValidationError: Se nome for inv√°lido
    """
    if not name or not name.strip():
        raise ValidationError("Nome do produto √© obrigat√≥rio")
    
    cleaned_name = name.strip()
    
    if len(cleaned_name) < 2:
        raise ValidationError("Nome deve ter pelo menos 2 caracteres")
    
    if len(cleaned_name) > 255:
        raise ValidationError("Nome muito longo (m√°ximo 255 caracteres)")
    
    # Verificar caracteres especiais perigosos
    dangerous_chars = ['<', '>', '"', "'", '&', ';', '(', ')']
    if any(char in cleaned_name for char in dangerous_chars):
        logger.warning(f"Nome cont√©m caracteres especiais: {cleaned_name}")
    
    logger.info(f"Nome de produto validado: {cleaned_name}")
    return cleaned_name


def validate_email(email: str) -> bool:
    """
    Valida formato de email
    
    Args:
        email: Email para validar
        
    Returns:
        True se email √© v√°lido
    """
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    is_valid = bool(re.match(pattern, email))
    
    if not is_valid:
        logger.warning(f"Email inv√°lido: {email}")
    
    return is_valid


def format_currency(value: float, currency: str = "BRL") -> str:
    """
    Formata valor como moeda brasileira
    
    Args:
        value: Valor num√©rico
        currency: C√≥digo da moeda
        
    Returns:
        Valor formatado
    """
    if currency == "BRL":
        return f"R$ {value:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')
    else:
        return f"{currency} {value:,.2f}"


def format_percentage(value: float, decimals: int = 1) -> str:
    """
    Formata valor como porcentagem
    
    Args:
        value: Valor num√©rico (0.1 = 10%)
        decimals: N√∫mero de casas decimais
        
    Returns:
        Valor formatado como porcentagem
    """
    return f"{value:.{decimals}f}%"


def calculate_price_change(old_price: float, new_price: float) -> Dict[str, Any]:
    """
    Calcula mudan√ßa de pre√ßo
    
    Args:
        old_price: Pre√ßo anterior
        new_price: Pre√ßo atual
        
    Returns:
        Dicion√°rio com mudan√ßa absoluta e percentual
    """
    change = new_price - old_price
    percentage = (change / old_price) * 100 if old_price > 0 else 0
    
    return {
        "change": change,
        "percentage": percentage,
        "direction": "up" if change > 0 else "down" if change < 0 else "stable"
    }


def parse_tags(tags_string: str) -> List[str]:
    """
    Converte string de tags em lista
    
    Args:
        tags_string: Tags separadas por v√≠rgula
        
    Returns:
        Lista de tags limpas
    """
    if not tags_string:
        return []
    
    tags = [tag.strip() for tag in tags_string.split(',') if tag.strip()]
    # Remover duplicatas mantendo ordem
    unique_tags = list(dict.fromkeys(tags))
    
    logger.info(f"Tags parseadas: {unique_tags}")
    return unique_tags


def format_tags(tags_list: List[str]) -> str:
    """
    Converte lista de tags em string
    
    Args:
        tags_list: Lista de tags
        
    Returns:
        String de tags separadas por v√≠rgula
    """
    if not tags_list:
        return ""
    
    return ", ".join(tags_list)


def get_price_trend_icon(trend_percentage: float) -> str:
    """
    Retorna √≠cone baseado na tend√™ncia de pre√ßo
    
    Args:
        trend_percentage: Percentual de mudan√ßa
        
    Returns:
        Emoji representando a tend√™ncia
    """
    if trend_percentage > 5:
        return "üìà"  # Subindo muito
    elif trend_percentage > 0:
        return "‚ÜóÔ∏è"  # Subindo pouco
    elif trend_percentage < -5:
        return "üìâ"  # Descendo muito
    elif trend_percentage < 0:
        return "‚ÜòÔ∏è"  # Descendo pouco
    else:
        return "‚û°Ô∏è"  # Est√°vel


def get_recommendation_color(recommendation: str) -> str:
    """
    Retorna cor baseada na recomenda√ß√£o
    
    Args:
        recommendation: Tipo de recomenda√ß√£o
        
    Returns:
        Cor em formato CSS
    """
    colors = {
        "COMPRAR_AGORA": "#28a745",  # Verde
        "AGUARDAR": "#ffc107",       # Amarelo
        "EVITAR": "#dc3545"          # Vermelho
    }
    return colors.get(recommendation, "#6c757d")  # Cinza padr√£o


def send_email_alert(product: Product, reason: str, current_price: float) -> bool:
    """
    Envia alerta por email (simula√ß√£o)
    
    Args:
        product: Produto do alerta
        reason: Motivo do alerta
        current_price: Pre√ßo atual
        
    Returns:
        True se email foi enviado com sucesso
    """
    try:
        # Verificar se credenciais SMTP est√£o dispon√≠veis
        smtp_server = st.secrets.get("SMTP_SERVER")
        smtp_user = st.secrets.get("SMTP_USER")
        smtp_password = st.secrets.get("SMTP_PASSWORD")
        
        if not all([smtp_server, smtp_user, smtp_password]):
            logger.info("Credenciais SMTP n√£o configuradas, simulando envio de email")
            return True  # Simular sucesso
        
        # Configurar email
        msg = MIMEMultipart()
        msg['From'] = smtp_user
        msg['To'] = smtp_user  # Auto-envio para demonstra√ß√£o
        msg['Subject'] = f"üö® Alerta de Pre√ßo - {product.product_name}"
        
        # Corpo do email
        body = f"""
        Ol√°!
        
        Seu alerta de pre√ßo foi ativado!
        
        üì¶ Produto: {product.product_name}
        üí∞ Pre√ßo Atual: R$ {current_price:.2f}
        üéØ Threshold: R$ {product.alert_threshold:.2f}
        üí° Motivo: {reason}
        
        Economia: R$ {product.alert_threshold - current_price:.2f}
        
        Acesse o PriceTrack AI para mais detalhes!
        
        Atenciosamente,
        Artemis - PriceTrack AI
        """
        
        msg.attach(MIMEText(body, 'plain'))
        
        # Enviar email
        server = smtplib.SMTP(smtp_server, st.secrets.get("SMTP_PORT", 587))
        server.starttls()
        server.login(smtp_user, smtp_password)
        
        text = msg.as_string()
        server.sendmail(smtp_user, smtp_user, text)
        server.quit()
        
        logger.info(f"Email de alerta enviado para produto: {product.product_name}")
        return True
        
    except Exception as e:
        logger.error(f"Erro ao enviar email de alerta: {str(e)}")
        return False


def generate_product_id() -> str:
    """
    Gera ID √∫nico para produto (para uso em session state)
    
    Returns:
        String com ID √∫nico
    """
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    return f"prod_{timestamp}"


def format_date_range(days: int) -> str:
    """
    Formata per√≠odo de dias em texto leg√≠vel
    
    Args:
        days: N√∫mero de dias
        
    Returns:
        String formatada
    """
    if days == 1:
        return "√∫ltimo dia"
    elif days == 7:
        return "√∫ltima semana"
    elif days == 30:
        return "√∫ltimo m√™s"
    elif days == 90:
        return "√∫ltimos 3 meses"
    else:
        return f"√∫ltimos {days} dias"


def calculate_savings_percentage(original_price: float, current_price: float) -> float:
    """
    Calcula percentual de economia
    
    Args:
        original_price: Pre√ßo original
        current_price: Pre√ßo atual
        
    Returns:
        Percentual de economia (positivo = economia)
    """
    if original_price <= 0:
        return 0
    
    savings = ((original_price - current_price) / original_price) * 100
    return max(0, savings)  # N√£o retornar valores negativos


def get_rating_stars(rating: int) -> str:
    """
    Converte rating num√©rico em estrelas
    
    Args:
        rating: Rating de 1 a 5
        
    Returns:
        String com estrelas
    """
    if not rating or rating < 1 or rating > 5:
        return "‚≠ê" * 0
    
    return "‚≠ê" * rating


def validate_budget(budget: Union[str, float, int]) -> Optional[float]:
    """
    Valida or√ßamento do usu√°rio
    
    Args:
        budget: Or√ßamento em string, float ou int
        
    Returns:
        Or√ßamento como float ou None se inv√°lido
    """
    try:
        if not budget or budget == "":
            return None
        
        budget_float = validate_price(budget)
        
        if budget_float < 10:
            logger.warning(f"Or√ßamento muito baixo: R$ {budget_float:.2f}")
            return None
        
        return budget_float
        
    except ValidationError:
        return None


def create_price_chart_data(price_history: List[Dict]) -> Dict[str, Any]:
    """
    Prepara dados para gr√°fico de pre√ßos
    
    Args:
        price_history: Hist√≥rico de pre√ßos
        
    Returns:
        Dados formatados para Plotly
    """
    if not price_history:
        return {"dates": [], "prices": [], "trend": []}
    
    # Ordenar por data
    sorted_history = sorted(price_history, key=lambda x: x.get("date", ""))
    
    dates = [entry["date"] for entry in sorted_history]
    prices = [entry["price"] for entry in sorted_history]
    
    # Calcular linha de tend√™ncia simples
    if len(prices) >= 2:
        x = list(range(len(prices)))
        trend = polyfit(x, prices, 1)
        trend_line = [trend[0] * i + trend[1] for i in x]
    else:
        trend_line = prices
    
    return {
        "dates": dates,
        "prices": prices,
        "trend": trend_line
    }


def get_product_status(product: Product) -> Dict[str, Any]:
    """
    Calcula status do produto baseado em dados dispon√≠veis
    
    Args:
        product: Produto a analisar
        
    Returns:
        Status do produto
    """
    status = {
        "has_price_history": bool(product.price_history),
        "has_tags": bool(product.tags),
        "has_alert": bool(product.alert_threshold and product.alert_threshold > 0),
        "has_rating": bool(product.user_rating),
        "completeness_score": 0
    }
    
    # Calcular score de completude
    score = 0
    if status["has_price_history"]:
        score += 30
    if status["has_tags"]:
        score += 20
    if status["has_alert"]:
        score += 25
    if status["has_rating"]:
        score += 15
    if product.product_name:
        score += 10
    
    status["completeness_score"] = score
    
    return status


def format_completeness_score(score: int) -> str:
    """
    Formata score de completude
    
    Args:
        score: Score de 0 a 100
        
    Returns:
        String formatada
    """
    if score >= 90:
        return "üü¢ Completo"
    elif score >= 70:
        return "üü° Quase completo"
    elif score >= 50:
        return "üü† Parcialmente completo"
    else:
        return "üî¥ Incompleto"


def polyfit(x, y, degree):
    """Fallback simples para polyfit"""
    if len(x) != len(y) or len(x) < 2:
        return [0, y[0] if y else 0]
    
    # Regress√£o linear simples
    n = len(x)
    sum_x = sum(x)
    sum_y = sum(y)
    sum_xy = sum(x[i] * y[i] for i in range(n))
    sum_x2 = sum(x[i] ** 2 for i in range(n))
    
    slope = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x ** 2)
    intercept = (sum_y - slope * sum_x) / n
    
    return [slope, intercept]
