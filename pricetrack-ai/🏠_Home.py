# Sidebar: configura√ß√£o de IA (chave manual)
def configure_ai_sidebar():
    with st.sidebar.expander("‚öôÔ∏è Configura√ß√£o de IA", expanded=False):
        st.markdown(
            """
            - Informe sua chave da API Gemini obtida no **Google AI Studio**.
            - Guia: **Gemini API ‚Äì In√≠cio R√°pido**.
            """
        )
        st.markdown(
            """
            ‚Ä¢ Obter chave: https://aistudio.google.com/

            ‚Ä¢ Quickstart: https://ai.google.dev/gemini-api/docs/quickstart?hl=pt-br
            """
        )

        api_key_input = st.text_input(
            "GEMINI_API_KEY",
            type="password",
            placeholder="Cole sua chave aqui",
            help="A chave n√£o ser√° salva em disco; fica apenas nesta sess√£o."
        )

        col_a, col_b = st.columns(2)
        with col_a:
            if st.button("Aplicar chave", use_container_width=True):
                try:
                    gemini_service.configure_api_key(api_key_input)
                    st.session_state["GEMINI_API_KEY"] = api_key_input
                    st.success("Chave aplicada com sucesso.")
                except AIServiceError as e:
                    st.error(f"Erro ao configurar chave: {e}")

        with col_b:
            if st.button("Limpar chave", use_container_width=True):
                st.session_state.pop("GEMINI_API_KEY", None)
                # N√£o reinicializamos automaticamente para evitar estado inconsistente
                st.info("Chave removida desta sess√£o. Informe novamente para usar a IA.")

    # Auto-aplicar chave da sess√£o ao carregar, se ainda n√£o configurado
    try:
        if st.session_state.get("GEMINI_API_KEY") and getattr(gemini_service, "client", None) is None:
            gemini_service.configure_api_key(st.session_state["GEMINI_API_KEY"])
    except Exception:
        pass

"""
üè† P√°gina Inicial - PriceTrack AI
Dashboard principal com overview e tour guiado
"""

import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
from core.logger import setup_logging, get_logger, log_user_action
from core.models import create_tables, SessionLocal
from core.database import DatabaseManager, DatabaseTransaction
from core.utils import format_currency, format_percentage, get_product_status, format_completeness_score
from core.ai_services import gemini_service, AIServiceError

# Configurar p√°gina
st.set_page_config(
    page_title="PriceTrack AI - Dashboard",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Inicializar logging
logger = get_logger(__name__)
setup_logging()

# CSS customizado
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .stat-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        border-left: 4px solid #667eea;
    }
    .feature-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #e9ecef;
        margin: 0.5rem 0;
    }
    .alert-banner {
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)


def initialize_session_state():
    """Inicializa vari√°veis do session state"""
    if 'initialized' not in st.session_state:
        st.session_state.initialized = True
        st.session_state.user_name = "Usu√°rio"
        st.session_state.chat_history = {}
        st.session_state.comparison_history = []
        logger.info("Session state inicializado")


def get_dashboard_stats():
    """Obt√©m estat√≠sticas do dashboard"""
    try:
        db = SessionLocal()
        with DatabaseTransaction(db) as db_manager:
            stats = db_manager.get_stats()
            return stats
    except Exception as e:
        logger.error(f"Erro ao obter estat√≠sticas: {str(e)}")
        return {
            "total_products": 0,
            "active_alerts": 0,
            "products_with_history": 0,
            "products_with_tags": 0,
            "coverage_percentage": 0
        }


def display_welcome_section():
    """Exibe se√ß√£o de boas-vindas"""
    st.markdown("""
    <div class="main-header">
        <h1>üè† Bem-vindo ao PriceTrack AI</h1>
        <h3>Sua consultora pessoal de e-commerce inteligente</h3>
        <p>Transforme dados de pre√ßos em decis√µes acion√°veis com a Artemis</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Efeito de bal√µes
    if st.button("üéâ Celebrar!", key="celebrate"):
        st.balloons()
        log_user_action(logger, "Celebra√ß√£o ativada")


def display_stats_cards(stats):
    """Exibe cards de estat√≠sticas"""
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f"""
        <div class="stat-card">
            <h3>üì¶</h3>
            <h2>{stats['total_products']}</h2>
            <p>Produtos Monitorados</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="stat-card">
            <h3>üîî</h3>
            <h2>{stats['active_alerts']}</h2>
            <p>Alertas Ativos</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="stat-card">
            <h3>üìä</h3>
            <h2>{stats['products_with_history']}</h2>
            <p>Com Hist√≥rico</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown(f"""
        <div class="stat-card">
            <h3>üè∑Ô∏è</h3>
            <h2>{stats['products_with_tags']}</h2>
            <p>Com Tags</p>
        </div>
        """, unsafe_allow_html=True)


def display_coverage_chart(stats):
    """Exibe gr√°fico de cobertura de dados"""
    if stats['total_products'] > 0:
        coverage_data = {
            'Categoria': ['Com Hist√≥rico', 'Sem Hist√≥rico'],
            'Quantidade': [
                stats['products_with_history'],
                stats['total_products'] - stats['products_with_history']
            ]
        }
        
        fig = px.pie(
            coverage_data,
            values='Quantidade',
            names='Categoria',
            title='üìà Cobertura de Dados de Pre√ßos',
            color_discrete_map={
                'Com Hist√≥rico': '#28a745',
                'Sem Hist√≥rico': '#dc3545'
            }
        )
        
        fig.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)


def display_quick_actions():
    """Exibe a√ß√µes r√°pidas"""
    st.subheader("üöÄ A√ß√µes R√°pidas")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîç Pesquisar Produto", key="quick_search", use_container_width=True):
            st.switch_page("pages/1_üîé_Pesquisar_e_Adicionar_Produto.py")
            log_user_action(logger, "Navega√ß√£o para pesquisa r√°pida")
    
    with col2:
        if st.button("üìä Ver Dashboard", key="quick_dashboard", use_container_width=True):
            st.switch_page("pages/2_üìä_Dashboard_de_An√°lise.py")
            log_user_action(logger, "Navega√ß√£o para dashboard")
    
    with col3:
        if st.button("‚öîÔ∏è Comparar Produtos", key="quick_compare", use_container_width=True):
            st.switch_page("pages/3_‚öîÔ∏è_Comparador_Inteligente.py")
            log_user_action(logger, "Navega√ß√£o para comparador")


def display_tour_section():
    """Exibe tour guiado das funcionalidades"""
    st.subheader("üéØ Tour Guiado - Conhe√ßa as Funcionalidades")
    
    with st.expander("üîç 1. Pesquisar e Adicionar Produtos", expanded=False):
        st.markdown("""
        <div class="feature-card">
            <h4>üîç Pesquisa Inteligente</h4>
            <p>‚Ä¢ Use linguagem natural para buscar produtos</p>
            <p>‚Ä¢ IA simula buscas em e-commerces brasileiros</p>
            <p>‚Ä¢ Receba ofertas estruturadas com scores de relev√¢ncia</p>
            <p>‚Ä¢ Adicione produtos para monitoramento autom√°tico</p>
        </div>
        """, unsafe_allow_html=True)
    
    with st.expander("üìä 2. Dashboard de An√°lise", expanded=False):
        st.markdown("""
        <div class="feature-card">
            <h4>üìä An√°lise Preditiva</h4>
            <p>‚Ä¢ Visualize hist√≥rico de pre√ßos com gr√°ficos interativos</p>
            <p>‚Ä¢ Receba resumos inteligentes e an√°lise de sentimento</p>
            <p>‚Ä¢ Chatbot contextual com mem√≥ria de conversa</p>
            <p>‚Ä¢ Insights preditivos com forecasts de pre√ßos</p>
        </div>
        """, unsafe_allow_html=True)
    
    with st.expander("‚öîÔ∏è 3. Comparador Inteligente", expanded=False):
        st.markdown("""
        <div class="feature-card">
            <h4>‚öîÔ∏è Compara√ß√£o Avan√ßada</h4>
            <p>‚Ä¢ Compare at√© 5 produtos lado a lado</p>
            <p>‚Ä¢ Recomenda√ß√µes personalizadas baseadas no seu foco</p>
            <p>‚Ä¢ An√°lise de custo-benef√≠cio detalhada</p>
            <p>‚Ä¢ Hist√≥rico de compara√ß√µes salvas</p>
        </div>
        """, unsafe_allow_html=True)
    
    with st.expander("üîî 4. Alertas e Notifica√ß√µes", expanded=False):
        st.markdown("""
        <div class="feature-card">
            <h4>üîî Alertas Proativos</h4>
            <p>‚Ä¢ Configure thresholds inteligentes sugeridos pela IA</p>
            <p>‚Ä¢ Notifica√ß√µes por email quando pre√ßos caem</p>
            <p>‚Ä¢ Dashboard de alertas pendentes</p>
            <p>‚Ä¢ Simula√ß√£o de alertas para testes</p>
        </div>
        """, unsafe_allow_html=True)


def display_recent_alerts():
    """Exibe alertas recentes"""
    try:
        db = SessionLocal()
        with DatabaseTransaction(db) as db_manager:
            triggered_alerts = db_manager.check_price_alerts()
            
            if triggered_alerts:
                st.subheader("üö® Alertas Ativos")
                
                for alert in triggered_alerts[:3]:  # Mostrar apenas 3 mais recentes
                    savings = alert['threshold_price'] - alert['current_price']
                    
                    st.markdown(f"""
                    <div class="alert-banner">
                        <h4>üéØ {alert['product_name']}</h4>
                        <p><strong>Pre√ßo Atual:</strong> {format_currency(alert['current_price'])}</p>
                        <p><strong>Threshold:</strong> {format_currency(alert['threshold_price'])}</p>
                        <p><strong>üí∞ Economia:</strong> {format_currency(savings)}</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                if len(triggered_alerts) > 3:
                    st.info(f"E mais {len(triggered_alerts) - 3} alertas ativos. Acesse a p√°gina de Alertas para ver todos.")
            
    except Exception as e:
        logger.error(f"Erro ao verificar alertas: {str(e)}")


def display_ai_insights():
    """Exibe insights gerados pela IA"""
    st.subheader("ü§ñ Insights da Artemis")
    
    try:
        # Gerar insight geral sobre o sistema
        insight_prompt = f"""
        Voc√™ √© Artemis, consultora de e-commerce. 
        
        Gere um insight breve e √∫til sobre monitoramento de pre√ßos para o usu√°rio.
        Foque em dicas pr√°ticas para economizar e tomar melhores decis√µes de compra.
        
        M√°ximo 2 par√°grafos, linguagem amig√°vel e direta.
        """
        
        response = gemini_service._make_api_call(insight_prompt)
        insight = response.text.strip()
        
        st.info(f"üí° **Dica da Artemis:** {insight}")
        
    except Exception as e:
        logger.error(f"Erro ao gerar insight: {str(e)}")
        st.info("üí° **Dica da Artemis:** Monitore produtos que voc√™ compra regularmente para identificar padr√µes sazonais e melhores momentos para comprar.")


def main():
    """Fun√ß√£o principal da p√°gina inicial"""
    try:
        # Inicializar sistema
        initialize_session_state()
        create_tables()
        # Configura√ß√£o da IA (chave manual) na sidebar
        configure_ai_sidebar()
        
        # Header principal
        display_welcome_section()
        
        # Obter estat√≠sticas
        stats = get_dashboard_stats()
        
        # Cards de estat√≠sticas
        display_stats_cards(stats)
        
        # Gr√°fico de cobertura
        st.subheader("üìà Vis√£o Geral dos Dados")
        display_coverage_chart(stats)
        
        # A√ß√µes r√°pidas
        display_quick_actions()
        
        # Alertas recentes
        display_recent_alerts()
        
        # Tour guiado
        display_tour_section()
        
        # Insights da IA
        display_ai_insights()
        
        # Footer
        st.markdown("---")
        st.markdown("""
        <div style="text-align: center; color: #666; padding: 2rem;">
            <p>üöÄ <strong>PriceTrack AI</strong> - Transformando dados em decis√µes inteligentes</p>
            <p>Desenvolvido com ‚ù§Ô∏è usando Streamlit e Google Gemini AI</p>
        </div>
        """, unsafe_allow_html=True)
        
        logger.info("P√°gina inicial carregada com sucesso")
        
    except Exception as e:
        logger.error(f"Erro na p√°gina inicial: {str(e)}")
        st.error("Erro ao carregar a p√°gina inicial. Verifique os logs para mais detalhes.")


if __name__ == "__main__":
    main()
